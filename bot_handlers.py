# bot_handlers.py
from __future__ import annotations

import os, re, logging, random, string
from datetime import datetime, timezone
from typing import Set

from telebot import TeleBot, types

# Membership core
from membership import (
    has_plus,
    activate_plus,
    get_expiry,
    remaining_days,
)

# N·ªôi dung signal ƒë·ªÉ m·ªü kh√≥a trong DM
from signal_tracker import render_full_signal_by_id
# T√≥m t·∫Øt/teaser khi user ch∆∞a Plus (t√πy ch·ªçn, n·∫øu kh√¥ng c√≥ s·∫Ω fallback)
try:
    from performance_logger import summarize_signal
except Exception:
    summarize_signal = None  # type: ignore


# =============== Helpers ===============

def _admin_ids() -> Set[int]:
    s = os.getenv("ADMIN_IDS", "")
    return {int(x) for x in re.findall(r"\d+", s)}

def _is_admin(user_id: int) -> bool:
    return user_id in _admin_ids()

def _gen_order_code(uid: int) -> str:
    # V√≠ d·ª•: ORD-YYMMDD-<2 k√Ω t·ª± ng·∫´u nhi√™n>
    ts = datetime.now(timezone.utc).strftime("%y%m%d-%H%M")
    rand = ''.join(random.choices(string.ascii_uppercase + string.digits, k=2))
    return f"ORD-{ts}-{rand}"

def _render_paywall_html(user_id: int, order_code: str) -> str:
    # Paywall ƒë·ªông k√®m th√¥ng tin ng√¢n h√†ng + n·ªôi dung CK: <m√£ order> <user_id>
    return (
        "‚ú® <b>N√¢ng c·∫•p / Gia h·∫°n g√≥i Plus</b>\n\n"
        "<b>1) Chuy·ªÉn kho·∫£n ng√¢n h√†ng</b>\n"
        "‚Ä¢ <b>Ng√¢n h√†ng:</b> Ng√¢n h√†ng Qu√¢n ƒë·ªôi (MBBank)\n"
        "‚Ä¢ <b>S·ªë t√†i kho·∫£n:</b> 0378285345\n"
        "‚Ä¢ <b>Ch·ªß t√†i kho·∫£n:</b> Tr·∫ßn Kh√°nh H∆∞ng\n\n"
        "<b>2) N·ªôi dung chuy·ªÉn kho·∫£n</b>\n"
        f"<code>{order_code} {user_id}</code>\n"
        "V√≠ d·ª•: <code>ORD-250820-12 123456789</code>\n\n"
        "<b>3) X√°c nh·∫≠n</b>\n"
        "‚Ä¢ Sau khi chuy·ªÉn kho·∫£n, b·∫•m n√∫t <b>‚Äú‚úÖ ƒê√£ chuy·ªÉn ti·ªÅn‚Äù</b> b√™n d∆∞·ªõi ƒë·ªÉ b√°o admin.\n"
        "‚Ä¢ Admin s·∫Ω k√≠ch ho·∫°t trong th·ªùi gian s·ªõm nh·∫•t.\n\n"
        "<i>L∆∞u √Ω:</i>\n"
        "‚Ä¢ Ghi ƒë√∫ng n·ªôi dung chuy·ªÉn kho·∫£n ƒë·ªÉ h·ªá th·ªëng so kh·ªõp nhanh.\n"
        "‚Ä¢ N·∫øu sai n·ªôi dung, c√≥ th·ªÉ c·∫ßn b·∫°n g·ª≠i ·∫£nh bi√™n lai khi admin y√™u c·∫ßu.\n"
    )

def _send_paywall(bot: TeleBot, chat_id: int | str, user_id: int):
    order_code = _gen_order_code(user_id)
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(
        "‚úÖ ƒê√£ chuy·ªÉn ti·ªÅn",
        callback_data=f"PAID_CONFIRMED:{user_id}:{order_code}"
    ))
    bot.send_message(
        chat_id,
        _render_paywall_html(user_id, order_code),
        parse_mode='HTML',
        reply_markup=kb,
        disable_web_page_preview=True
    )

def _plus_link(bot: TeleBot) -> str:
    # DM-only: lu√¥n tr·ªè v·ªÅ DM v·ªõi deeplink UPGRADE (kh√¥ng d√πng landing page)
    uname = bot.get_me().username
    return f"https://t.me/{uname}?start=UPGRADE"

def _format_status(uid: int) -> str:
    days = remaining_days(uid)
    exp = get_expiry(uid)
    if days <= 0 or not exp:
        return "üì¶ <b>G√≥i hi·ªán t·∫°i:</b> Free\n‚è≥ <i>Ch∆∞a c√≥ h·∫°n Plus</i>"
    # hi·ªÉn th·ªã theo UTC ƒë·ªÉ nh·∫•t qu√°n
    return (
        f"üì¶ <b>G√≥i hi·ªán t·∫°i:</b> Plus\n"
        f"‚è≥ <b>C√≤n l·∫°i:</b> {days} ng√†y\n"
        f"üóì <b>H·∫øt h·∫°n (UTC):</b> {exp.strftime('%Y-%m-%d %H:%M:%S')}"
    )


# =============== Register ===============

def register_handlers(bot: TeleBot):
    # /start [TOKEN]
    @bot.message_handler(commands=['start'])
    def on_start(m):
        token = None
        parts = m.text.split(maxsplit=1)
        if len(parts) > 1:
            token = parts[1].strip()

        # 1) Deeplink UPGRADE -> t·∫°o m√£ order + g·ª≠i Paywall + n√∫t "ƒê√£ chuy·ªÉn ti·ªÅn"
        if token == "UPGRADE":
            _send_paywall(bot, m.chat.id, m.from_user.id)
            return

        # 2) Deeplink SIG_<id> -> unlock n·∫øu c√≥ Plus, ng∆∞·ª£c l·∫°i g·ª≠i teaser + link n√¢ng c·∫•p
        if token and token.startswith('SIG_'):
            sig_id = token[4:]
            # Khuy·∫øn ngh·ªã: ch·ªâ g·ª≠i full trong DM
            if m.chat.type != 'private':
                link = _plus_link(bot)
                bot.send_message(
                    m.chat.id,
                    f"Vui l√≤ng m·ªü DM v·ªõi bot ƒë·ªÉ xem chi ti·∫øt.\nLink: {link}",
                    disable_web_page_preview=True
                )
                return

            if has_plus(m.from_user.id):
                try:
                    html = render_full_signal_by_id(sig_id)
                    if not html:
                        raise ValueError("signal not found")
                    bot.send_message(m.chat.id, html, parse_mode='HTML', disable_web_page_preview=True)
                except Exception as e:
                    logging.exception(f"render_full_signal_by_id error: {e}")
                    bot.send_message(m.chat.id, "Xin l·ªói, kh√¥ng t√¨m th·∫•y signal ho·∫∑c x·∫£y ra l·ªói khi t·∫£i.")
            else:
                # Ch∆∞a Plus: g·ª≠i teaser + n√∫t n√¢ng c·∫•p
                kb = types.InlineKeyboardMarkup()
                if m.chat.type == 'private':
                    kb.add(types.InlineKeyboardButton("‚ú® N√¢ng c·∫•p/Gia h·∫°n Plus", callback_data="OPEN_PAYWALL"))
                else:
                    kb.add(types.InlineKeyboardButton("‚ú® N√¢ng c·∫•p/Gia h·∫°n Plus", url=_plus_link(bot)))
                # ... send_message(..., reply_markup=kb)
                teaser = None
                if summarize_signal:
                    try:
                        teaser = summarize_signal(sig_id)
                    except Exception:
                        teaser = None
                bot.send_message(
                    m.chat.id,
                    teaser or "B·∫°n ƒëang ·ªü g√≥i Free. M·ªôt ph·∫ßn n·ªôi dung ƒë√£ b·ªã ·∫©n.",
                    parse_mode='HTML',
                    reply_markup=kb,
                    disable_web_page_preview=True
                )
            return

        # 3) Kh√¥ng c√≥ token -> ch√†o m·ª´ng + g·ª£i √Ω l·ªánh
        bot.send_message(
            m.chat.id,
            "Ch√†o m·ª´ng! B·∫°n c√≥ th·ªÉ d√πng:\n"
            "‚Ä¢ /status ‚Äî xem tr·∫°ng th√°i g√≥i Plus\n"
            "‚Ä¢ /plus_link ‚Äî nh·∫≠n link n√¢ng c·∫•p/gia h·∫°n\n",
            parse_mode='HTML'
        )

    # /status ‚Äî tr·∫°ng th√°i g√≥i
    @bot.message_handler(commands=['status'])
    def on_status(m):
        bot.send_message(m.chat.id, _format_status(m.from_user.id), parse_mode='HTML')
        
    # /upgrade ‚Äî m·ªü Paywall trong DM
    @bot.message_handler(commands=['upgrade'])
    def on_upgrade(m):
        _send_paywall(bot, m.chat.id, m.from_user.id)

    # /plus_link ‚Äî g·ª≠i link n√¢ng c·∫•p/gia h·∫°n (DM)
    @bot.message_handler(commands=['plus_link'])
    def on_plus_link(m):
        link = _plus_link(bot)
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚ú® N√¢ng c·∫•p/Gia h·∫°n Plus", url=link))
        bot.send_message(m.chat.id, f"Link n√¢ng c·∫•p/gia h·∫°n:\n{link}", reply_markup=kb, disable_web_page_preview=True)

    # /plus_add <user_id> <days> ‚Äî admin
    @bot.message_handler(commands=['plus_add'])
    def on_plus_add(m):
        if not _is_admin(m.from_user.id):
            bot.reply_to(m, "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
            return
        try:
            _, uid_str, days_str = m.text.strip().split(maxsplit=2)
            uid = int(uid_str)
            days = int(days_str)
            exp = activate_plus(uid, days)
            bot.reply_to(m, f"‚úÖ ƒê√£ c·ªông {days} ng√†y cho {uid}. H·∫øt h·∫°n m·ªõi (UTC): {exp.strftime('%Y-%m-%d %H:%M:%S')}")
        except Exception as e:
            bot.reply_to(m, f"‚ùå Sai c√∫ ph√°p. D√πng: /plus_add <user_id> <days>\nErr: {e}")

    # /remove <user_id> ‚Äî admin (h·ªßy ngay b·∫±ng c√°ch set 0 ng√†y)
    @bot.message_handler(commands=['remove'])
    def on_remove(m):
        if not _is_admin(m.from_user.id):
            bot.reply_to(m, "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
            return
        try:
            _, uid_str = m.text.strip().split(maxsplit=1)
            uid = int(uid_str)
            # membership.py ch∆∞a c√≥ revoke; d√πng activate_plus(..., 0) ƒë·ªÉ h·∫øt h·∫°n "ngay"
            activate_plus(uid, 0)
            bot.reply_to(m, f"‚úÖ ƒê√£ h·ªßy g√≥i Plus c·ªßa {uid}.")
        except Exception as e:
            bot.reply_to(m, f"‚ùå Sai c√∫ ph√°p. D√πng: /remove <user_id>\nErr: {e}")

    # Callback: "OPEN_PAYWALL" -> m·ªü Paywall trong DM
    @bot.callback_query_handler(func=lambda c: c.data == "OPEN_PAYWALL")
    def on_open_paywall(call):
        _send_paywall(bot, call.message.chat.id, call.from_user.id)
        bot.answer_callback_query(call.id)

    # Callback: ‚Äúƒê√£ chuy·ªÉn ti·ªÅn‚Äù
    @bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("PAID_CONFIRMED"))
    def on_paid_confirmed(call):
        # H·ªó tr·ª£ 2 ho·∫∑c 3 ph·∫ßn: PAID_CONFIRMED:<uid>[:<order_code>]
        try:
            parts = call.data.split(":")
            paid_uid = int(parts[1]) if len(parts) > 1 else call.from_user.id
            paid_order = parts[2] if len(parts) > 2 else "N/A"
        except Exception:
            paid_uid, paid_order = call.from_user.id, "N/A"

        bot.answer_callback_query(call.id, "C·∫£m ∆°n! Admin s·∫Ω k√≠ch ho·∫°t s·ªõm.")
        # B√°o cho admin
        u = call.from_user
        name = (u.first_name or "") + (" " + u.last_name if u.last_name else "")
        uname = f"@{u.username}" if u.username else "(no username)"
        text = (
            "üí≥ <b>Y√™u c·∫ßu k√≠ch ho·∫°t Plus</b>\n"
            f"‚Ä¢ user_id: <code>{paid_uid}</code> {uname} {name}\n"
            f"‚Ä¢ order_code: <code>{paid_order}</code>\n"
            f"‚Ä¢ L·ªánh g·ª£i √Ω: <code>/plus_add {paid_uid} 30</code>\n"
        )

        for aid in _admin_ids():
            try:
                bot.send_message(aid, text, parse_mode='HTML')
            except Exception:
                pass
