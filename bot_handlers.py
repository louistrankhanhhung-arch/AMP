# bot_handlers.py
from __future__ import annotations

import os, re, logging
from datetime import datetime
from typing import Set

from telebot import TeleBot, types

# Membership core
from app.membership import (
    has_plus,
    activate_plus,
    get_expiry,
    remaining_days,
)

# N·ªôi dung signal ƒë·ªÉ m·ªü kh√≥a trong DM
from app.signal_tracker import render_full_signal_by_id
# T√≥m t·∫Øt/teaser khi user ch∆∞a Plus (t√πy ch·ªçn, n·∫øu kh√¥ng c√≥ s·∫Ω fallback)
try:
    from app.performance_logger import summarize_signal
except Exception:
    summarize_signal = None  # type: ignore


# =============== Helpers ===============

def _admin_ids() -> Set[int]:
    s = os.getenv("ADMIN_IDS", "")
    return {int(x) for x in re.findall(r"\d+", s)}

def _is_admin(user_id: int) -> bool:
    return user_id in _admin_ids()

def _plus_link(bot: TeleBot) -> str:
    # ∆Øu ti√™n trang thanh to√°n ri√™ng n·∫øu c√≥
    join = os.getenv("JOIN_URL")
    if join:
        return join
    # M·∫∑c ƒë·ªãnh deeplink v·ªÅ DM ƒë·ªÉ hi·ªÉn th·ªã Paywall
    uname = bot.get_me().username
    return f"https://t.me/{uname}?start=UPGRADE}"

def _paywall_text() -> str:
    txt = os.getenv("PAYWALL_TEXT")
    if txt:
        return txt
    # M·∫∑c ƒë·ªãnh: h∆∞·ªõng d·∫´n chuy·ªÉn kho·∫£n ng·∫Øn g·ªçn
    return (
        "‚ú® <b>N√¢ng c·∫•p/gia h·∫°n g√≥i Plus</b>\n"
        "‚Ä¢ Chuy·ªÉn kho·∫£n theo h∆∞·ªõng d·∫´n t·∫°i trang Paywall.\n"
        "‚Ä¢ Sau khi chuy·ªÉn xong, b·∫•m n√∫t <b>‚Äúƒê√£ chuy·ªÉn ti·ªÅn‚Äù</b> ƒë·ªÉ b√°o admin.\n"
        "‚Ä¢ Admin s·∫Ω k√≠ch ho·∫°t trong th·ªùi gian s·ªõm nh·∫•t.\n"
    )

def _format_status(uid: int) -> str:
    days = remaining_days(uid)
    exp = get_expiry(uid)
    if days <= 0 or not exp:
        return "üì¶ <b>G√≥i hi·ªán t·∫°i:</b> Free\n‚è≥ <i>Ch∆∞a c√≥ h·∫°n Plus</i>"
    # hi·ªÉn th·ªã theo UTC ƒë·ªÉ nh·∫•t qu√°n
    return (
        f"üì¶ <b>G√≥i hi·ªán t·∫°i:</b> Plus\n"
        f"‚è≥ <b>C√≤n l·∫°i:</b> {days} ng√†y\n"
        f"üóì <b>H·∫øt h·∫°n (UTC):</b> {exp.strftime('%Y-%m-%d %H:%M:%S')}"
    )


# =============== Register ===============

def register_handlers(bot: TeleBot):
    # /start [TOKEN]
    @bot.message_handler(commands=['start'])
    def on_start(m):
        token = None
        parts = m.text.split(maxsplit=1)
        if len(parts) > 1:
            token = parts[1].strip()

        # 1) Deeplink UPGRADE -> g·ª≠i Paywall + n√∫t "ƒê√£ chuy·ªÉn ti·ªÅn"
        if token == "UPGRADE":
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("‚úÖ ƒê√£ chuy·ªÉn ti·ªÅn", callback_data=f"PAID_CONFIRMED:{m.from_user.id}"))
            bot.send_message(
                m.chat.id,
                _paywall_text(),
                parse_mode='HTML',
                reply_markup=kb,
                disable_web_page_preview=True
            )
            return

        # 2) Deeplink SIG_<id> -> unlock n·∫øu c√≥ Plus, ng∆∞·ª£c l·∫°i g·ª≠i teaser + link n√¢ng c·∫•p
        if token and token.startswith('SIG_'):
            sig_id = token[4:]
            # Khuy·∫øn ngh·ªã: ch·ªâ g·ª≠i full trong DM
            if m.chat.type != 'private':
                link = _plus_link(bot)
                bot.send_message(
                    m.chat.id,
                    f"Vui l√≤ng m·ªü DM v·ªõi bot ƒë·ªÉ xem chi ti·∫øt.\nLink: {link}",
                    disable_web_page_preview=True
                )
                return

            if has_plus(m.from_user.id):
                try:
                    html = render_full_signal_by_id(sig_id)
                    if not html:
                        raise ValueError("signal not found")
                    bot.send_message(m.chat.id, html, parse_mode='HTML', disable_web_page_preview=True)
                except Exception as e:
                    logging.exception(f"render_full_signal_by_id error: {e}")
                    bot.send_message(m.chat.id, "Xin l·ªói, kh√¥ng t√¨m th·∫•y signal ho·∫∑c x·∫£y ra l·ªói khi t·∫£i.")
            else:
                # Ch∆∞a Plus: g·ª≠i teaser (n·∫øu c√≥), k√®m n√∫t n√¢ng c·∫•p
                kb = types.InlineKeyboardMarkup()
                kb.add(types.InlineKeyboardButton("‚ú® N√¢ng c·∫•p/Gia h·∫°n Plus", url=_plus_link(bot)))
                teaser = None
                if summarize_signal:
                    try:
                        teaser = summarize_signal(sig_id)
                    except Exception:
                        teaser = None
                bot.send_message(
                    m.chat.id,
                    teaser or "B·∫°n ƒëang ·ªü g√≥i Free. M·ªôt ph·∫ßn n·ªôi dung ƒë√£ b·ªã ·∫©n.",
                    parse_mode='HTML',
                    reply_markup=kb,
                    disable_web_page_preview=True
                )
            return

        # 3) Kh√¥ng c√≥ token -> ch√†o m·ª´ng + g·ª£i √Ω l·ªánh
        bot.send_message(
            m.chat.id,
            "Ch√†o m·ª´ng! B·∫°n c√≥ th·ªÉ d√πng:\n"
            "‚Ä¢ /status ‚Äî xem tr·∫°ng th√°i g√≥i Plus\n"
            "‚Ä¢ /plus_link ‚Äî nh·∫≠n link n√¢ng c·∫•p/gia h·∫°n\n",
            parse_mode='HTML'
        )

    # /status ‚Äî tr·∫°ng th√°i g√≥i
    @bot.message_handler(commands=['status'])
    def on_status(m):
        bot.send_message(m.chat.id, _format_status(m.from_user.id), parse_mode='HTML')

    # /plus_link ‚Äî g·ª≠i link n√¢ng c·∫•p/gia h·∫°n
    @bot.message_handler(commands=['plus_link'])
    def on_plus_link(m):
        link = _plus_link(bot)
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚ú® N√¢ng c·∫•p/Gia h·∫°n Plus", url=link))
        bot.send_message(m.chat.id, f"Link n√¢ng c·∫•p/gia h·∫°n:\n{link}", reply_markup=kb, disable_web_page_preview=True)

    # /plus_add <user_id> <days> ‚Äî admin
    @bot.message_handler(commands=['plus_add'])
    def on_plus_add(m):
        if not _is_admin(m.from_user.id):
            bot.reply_to(m, "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
            return
        try:
            _, uid_str, days_str = m.text.strip().split(maxsplit=2)
            uid = int(uid_str)
            days = int(days_str)
            exp = activate_plus(uid, days)
            bot.reply_to(m, f"‚úÖ ƒê√£ c·ªông {days} ng√†y cho {uid}. H·∫øt h·∫°n m·ªõi (UTC): {exp.strftime('%Y-%m-%d %H:%M:%S')}")
        except Exception as e:
            bot.reply_to(m, f"‚ùå Sai c√∫ ph√°p. D√πng: /plus_add <user_id> <days>\nErr: {e}")

    # /remove <user_id> ‚Äî admin (h·ªßy ngay b·∫±ng c√°ch set 0 ng√†y)
    @bot.message_handler(commands=['remove'])
    def on_remove(m):
        if not _is_admin(m.from_user.id):
            bot.reply_to(m, "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
            return
        try:
            _, uid_str = m.text.strip().split(maxsplit=1)
            uid = int(uid_str)
            # membership.py ch∆∞a c√≥ revoke; d√πng activate_plus(..., 0) ƒë·ªÉ h·∫øt h·∫°n "ngay"
            activate_plus(uid, 0)
            bot.reply_to(m, f"‚úÖ ƒê√£ h·ªßy g√≥i Plus c·ªßa {uid}.")
        except Exception as e:
            bot.reply_to(m, f"‚ùå Sai c√∫ ph√°p. D√πng: /remove <user_id>\nErr: {e}")

    # Callback: ‚Äúƒê√£ chuy·ªÉn ti·ªÅn‚Äù
    @bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("PAID_CONFIRMED"))
    def on_paid_confirmed(call):
        try:
            parts = call.data.split(":", 1)
            paid_uid = int(parts[1]) if len(parts) > 1 else call.from_user.id
        except Exception:
            paid_uid = call.from_user.id

        bot.answer_callback_query(call.id, "C·∫£m ∆°n! Admin s·∫Ω k√≠ch ho·∫°t s·ªõm.")
        # B√°o cho admin
        text = (
            "üí≥ <b>Y√™u c·∫ßu k√≠ch ho·∫°t Plus</b>\n"
            f"‚Ä¢ user_id: <code>{paid_uid}</code>\n"
            "‚Ä¢ L·ªánh g·ª£i √Ω: <code>/plus_add {uid} 30</code>\n".format(uid=paid_uid)
        )
        for aid in _admin_ids():
            try:
                bot.send_message(aid, text, parse_mode='HTML')
            except Exception:
                pass
